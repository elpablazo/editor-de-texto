{"version":3,"sources":["helpers/unitConverter.ts","components/Pagina.tsx","components/Toolbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["cmToPx","centimeters","equivalencia","parseFloat","toFixed","Elemento","tag","href","innerRef","contenido","Blocks","BloqueActual","id","ref","onClick","alert","console","log","current","Pagina","alto","ancho","margenSuperior","margenInferior","margenDerecha","margenIzquierda","setBlocks","handleKeyDown","e","key","preventDefault","nuevoBloque","justify","length","content","React","createRef","añadirNuevoBloque","className","style","height","width","paddingTop","paddingLeft","paddingBottom","paddingRight","contentEditable","onKeyDown","onMouseUp","map","element","Toolbar","actualizarBloque","propiedad","cambio","nuevoClassName","includes","replace","values","value","i","name","selected","type","defaultValue","App","useState","useRef","ConfiguracionesPagina","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7c79a1b.chunk.js","sourcesContent":["// Convierte pixeles en centímetros\r\nexport function pxToCm(pixels: number) {\r\n  const factor = 0.0264583333;\r\n  let equivalencia = pixels * factor;\r\n  equivalencia = parseFloat(equivalencia.toFixed(2));\r\n  return equivalencia;\r\n}\r\n\r\n// Convierte centímetros en pixeles\r\nexport function cmToPx(centimeters: number) {\r\n  const factor = 37.7952755906;\r\n  let equivalencia = centimeters * factor;\r\n  equivalencia = parseFloat(equivalencia.toFixed(2));\r\n  return equivalencia;\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\nimport { BlockI } from \"../App\";\r\n// Props\r\nexport type PaginaProps = {\r\n  Blocks: BlockI[];\r\n  setBlocks: any;\r\n  BloqueActual: React.MutableRefObject<any>;\r\n  alto: number;\r\n  ancho: number;\r\n  margenSuperior: number;\r\n  margenInferior: number;\r\n  margenIzquierda: number;\r\n  margenDerecha: number;\r\n};\r\n\r\n// Componente de la hoja\r\nconst Pagina = ({\r\n  alto,\r\n  ancho,\r\n  margenSuperior,\r\n  margenInferior,\r\n  margenDerecha,\r\n  margenIzquierda,\r\n  Blocks,\r\n  setBlocks,\r\n  BloqueActual,\r\n}: PaginaProps): JSX.Element => {\r\n  // Añade un nuevo bloque\r\n  const añadirNuevoBloque = () => {\r\n    // Crea un nuevo bloque vacío\r\n    const nuevoBloque: BlockI = {\r\n      justify: \"text-left\",\r\n      id: Blocks.length,\r\n      tag: \"p\",\r\n      content: \".\",\r\n      ref: React.createRef(),\r\n    };\r\n    // Lo guarda en el array de bloques\r\n    setBlocks(() => [...Blocks, nuevoBloque]);\r\n    // Se actualiza el Bloque actual\r\n    BloqueActual.current = nuevoBloque;\r\n  };\r\n\r\n  // Maneja cada vez que se presiona una tecla\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLParagraphElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      añadirNuevoBloque();\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    // let x = window.getSelection();\r\n    // BloqueActual.current = x;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"mx-auto my-2 overflow-y-hidden bg-white rounded-sm shadow-lg\"\r\n      style={{\r\n        height: `${alto}px`,\r\n        width: `${ancho}px`,\r\n        paddingTop: `${margenSuperior}px`,\r\n        paddingLeft: `${margenIzquierda}px`,\r\n        paddingBottom: `${margenInferior}px`,\r\n        paddingRight: `${margenDerecha}px`,\r\n      }}\r\n      contentEditable={true}\r\n      onKeyDown={(e) => handleKeyDown(e)}\r\n      onMouseUp={(e) => handleMouseUp(e)}\r\n    >\r\n      {Blocks.map((element, key) => (\r\n        <Elemento\r\n          tag={element.tag}\r\n          innerRef={element.ref}\r\n          key={key}\r\n          contenido={element.content}\r\n          id={element.id}\r\n          Blocks={Blocks}\r\n          BloqueActual={BloqueActual}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface ElementoProps {\r\n  id: number;\r\n  tag?: string;\r\n  innerRef: any;\r\n  contenido: any;\r\n  href?: string;\r\n  BloqueActual: any;\r\n  Blocks: any;\r\n}\r\n\r\nconst Elemento = ({\r\n  tag = \"p\",\r\n  href = \"\",\r\n  innerRef,\r\n  contenido,\r\n  Blocks,\r\n  BloqueActual,\r\n  id,\r\n}: ElementoProps) => {\r\n  const handleChangeBloqueActual = () => {\r\n    alert(\"estas delicioso\");\r\n    console.log(id);\r\n\r\n    BloqueActual.current = Blocks[id];\r\n  };\r\n\r\n  if (tag === \"p\")\r\n    return (\r\n      <p ref={innerRef} onClick={() => handleChangeBloqueActual()}>\r\n        {contenido}\r\n      </p>\r\n    );\r\n  if (tag === \"li\") return <li ref={innerRef}>{contenido}</li>;\r\n  if (tag === \"h1\") return <h1 ref={innerRef}>{contenido}</h1>;\r\n  if (tag === \"h2\") return <h2 ref={innerRef}>{contenido}</h2>;\r\n  if (tag === \"h3\") return <h3 ref={innerRef}>{contenido}</h3>;\r\n  if (tag === \"h4\") return <h4 ref={innerRef}>{contenido}</h4>;\r\n  if (tag === \"h5\") return <h5 ref={innerRef}>{contenido}</h5>;\r\n  if (tag === \"h6\") return <h6 ref={innerRef}>{contenido}</h6>;\r\n  if (tag === \"a\")\r\n    return (\r\n      <a ref={innerRef} href={href}>\r\n        {contenido}\r\n      </a>\r\n    );\r\n  if (tag === \"h4\") return <h4 ref={innerRef}>{contenido}</h4>;\r\n  return <></>;\r\n};\r\n\r\nexport default Pagina;\r\n","// Props de la toolbar\r\ntype ToolbarProps = {\r\n  Blocks: any;\r\n  setBlocks: any;\r\n  BloqueActual: React.MutableRefObject<any>;\r\n};\r\n\r\n// Componente\r\nconst Toolbar = ({ BloqueActual, setBlocks, Blocks }: ToolbarProps) => {\r\n  // Esta función permite actualizar bloques\r\n  const actualizarBloque = (id: number, propiedad: string, cambio: string) => {\r\n    // Obtenemos el bloque\r\n    let nuevoBloque = Blocks[id];\r\n\r\n    if (propiedad === \"className\") {\r\n      // Se guarda la clase que ya se tiene\r\n      let nuevoClassName = nuevoBloque.ref.current.className;\r\n\r\n      // Si ya se tiene, se intercambia, si no, se incluye.\r\n      if (nuevoBloque.ref.current.className.includes(cambio)) {\r\n        nuevoClassName = nuevoClassName.replace(cambio, \"\");\r\n        nuevoBloque.ref.current.className = nuevoClassName;\r\n      } else {\r\n        nuevoBloque.ref.current.className += \" \" + cambio;\r\n      }\r\n    }\r\n\r\n    setBlocks((values: any) =>\r\n      values.map((value: any, i: any) => (i === id ? nuevoBloque : value))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed top-0 left-0 z-10 flex flex-row justify-center w-screen py-2 space-x-2 text-xl text-white bg-green-500 shadow-xl \">\r\n      {/*SECTION  Estilo  */}\r\n      <select\r\n        name=\"Estilo\"\r\n        id=\"Estilo\"\r\n        className=\"w-32 px-2 text-sm transition-all bg-green-500 rounded outline-none cursor-pointer hover:bg-green-700\"\r\n      >\r\n        <option value=\"H1\" selected>\r\n          Encabezado 1\r\n        </option>\r\n        <option value=\"H2\" className=\"text-xl\">\r\n          Encabezado 2\r\n        </option>\r\n        <option value=\"H3\" className=\"text-lg\">\r\n          Encabezado 3\r\n        </option>\r\n      </select>\r\n      {/* !SECTION ESTILO */}\r\n\r\n      <div className=\"border-l-2 border-green-600\"></div>\r\n\r\n      {/* SECTION Letra */}\r\n      <select\r\n        name=\"Estilo\"\r\n        id=\"Estilo\"\r\n        className=\"w-32 px-2 text-sm transition-all bg-green-500 rounded outline-none cursor-pointer hover:bg-green-700\"\r\n      >\r\n        <option value=\"H1\" selected>\r\n          Arial\r\n        </option>\r\n        <option value=\"H2\">Calibri</option>\r\n        <option value=\"H3\">Consolas</option>\r\n      </select>\r\n      <input\r\n        type=\"number\"\r\n        defaultValue={20}\r\n        name=\"Estilo\"\r\n        id=\"Estilo\"\r\n        className=\"w-20 px-2 text-sm transition-all bg-green-500 rounded outline-none cursor-pointer hover:bg-green-700\"\r\n      />\r\n\r\n      {/* !SECTION Letra */}\r\n\r\n      <div className=\"border-l-2 border-green-600\"></div>\r\n\r\n      {/* SECTION Negritas, italica, subrayado */}\r\n      <ul className=\"flex flex-row justify-center text-center list-none\">\r\n        <li>\r\n          <i\r\n            className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-type-bold hover:bg-green-700\"\r\n            onClick={() =>\r\n              actualizarBloque(\r\n                BloqueActual.current.id,\r\n                \"className\",\r\n                \"font-bold\"\r\n              )\r\n            }\r\n          ></i>\r\n        </li>\r\n        <li>\r\n          <i\r\n            className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-type-italic hover:bg-green-700\"\r\n            onClick={() =>\r\n              actualizarBloque(BloqueActual.current.id, \"className\", \"italic\")\r\n            }\r\n          ></i>\r\n        </li>\r\n        <li>\r\n          <i\r\n            className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-type-underline hover:bg-green-700\"\r\n            onClick={() =>\r\n              actualizarBloque(\r\n                BloqueActual.current.id,\r\n                \"className\",\r\n                \"underline\"\r\n              )\r\n            }\r\n          ></i>\r\n        </li>\r\n      </ul>\r\n      {/* !SECTION Negritas, italica, subrayado */}\r\n\r\n      <div className=\"border-l-2 border-green-600\"></div>\r\n\r\n      {/* SECTION Formato párrafo */}\r\n      <ul className=\"flex flex-row justify-center text-center list-none\">\r\n        <li>\r\n          <i\r\n            className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-text-left hover:bg-green-700\"\r\n            onClick={() =>\r\n              actualizarBloque(\r\n                BloqueActual.current.id,\r\n                \"className\",\r\n                \"text-left\"\r\n              )\r\n            }\r\n          ></i>\r\n        </li>\r\n        <li>\r\n          <i\r\n            className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-text-center hover:bg-green-700\"\r\n            onClick={() =>\r\n              actualizarBloque(\r\n                BloqueActual.current.id,\r\n                \"className\",\r\n                \"text-center\"\r\n              )\r\n            }\r\n          ></i>\r\n        </li>\r\n        <li>\r\n          <i\r\n            className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-text-right hover:bg-green-700\"\r\n            onClick={() =>\r\n              actualizarBloque(\r\n                BloqueActual.current.id,\r\n                \"className\",\r\n                \"text-right\"\r\n              )\r\n            }\r\n          ></i>\r\n        </li>\r\n        <li>\r\n          <i\r\n            className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-justify hover:bg-green-700\"\r\n            onClick={() =>\r\n              actualizarBloque(\r\n                BloqueActual.current.id,\r\n                \"className\",\r\n                \"text-justify\"\r\n              )\r\n            }\r\n          ></i>\r\n        </li>\r\n      </ul>\r\n      {/* !SECTION Formato párrafo */}\r\n\r\n      <div className=\"border-l-2 border-green-600\"></div>\r\n\r\n      {/* SECTION Listas */}\r\n      <ul className=\"flex flex-row justify-center text-center list-none\">\r\n        <li>\r\n          <i className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-list-check hover:bg-green-700\"></i>\r\n        </li>\r\n        <li>\r\n          <i className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-list-ul hover:bg-green-700\"></i>\r\n        </li>\r\n        <li>\r\n          <i\r\n            className=\"px-1 transition-all rounded-sm cursor-pointer bi bi-list-ol hover:bg-green-700\"\r\n            onClick={() => {\r\n              actualizarBloque(BloqueActual.current.id, \"tag\", \"li\");\r\n            }}\r\n          ></i>\r\n        </li>\r\n      </ul>\r\n      {/* !SECTION Listas */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toolbar;\r\n","import React, { useState, useRef, useEffect } from \"react\";\n// Helpers\nimport { cmToPx } from \"./helpers/unitConverter\";\n\n// Componentes\nimport Pagina, { PaginaProps } from \"./components/Pagina\";\nimport Toolbar from \"./components/Toolbar\";\n\nexport interface BlockI {\n  id: number;\n  tag?: string;\n  justify: \"text-left\" | \"text-center\" | \"text-right\" | \"text-justify\";\n  content: any;\n  ref: any;\n}\n\nfunction App() {\n  // Aquí se guardan todos los elementos (o bloques) con uno inicializado\n  const [Blocks, setBlocks] = useState<BlockI[]>([\n    {\n      id: 0,\n      tag: \"p\",\n      justify: \"text-left\",\n      content:\n        \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Culpa temporibus est non, reprehenderit quidem, ipsa nihil harum veniam quae voluptate exercitationem voluptates aliquam! Porro fugiat dolore nesciunt ex debitis suscipit.\",\n      ref: React.createRef(),\n    },\n  ]);\n\n  // Bloque seleccionado actualmente\n  const BloqueActual = useRef<any>(Blocks[0]);\n\n  // Configuraciones de la página\n  const [ConfiguracionesPagina, setConfiguracionesPagina] =\n    useState<PaginaProps>({\n      Blocks: Blocks,\n      setBlocks: setBlocks,\n      BloqueActual: BloqueActual,\n      alto: 1123,\n      ancho: 794,\n      margenSuperior: cmToPx(0.5),\n      margenDerecha: cmToPx(2),\n      margenInferior: cmToPx(2),\n      margenIzquierda: cmToPx(2.5),\n    });\n\n  useEffect(() => {\n    console.log(BloqueActual.current);\n  }, [BloqueActual]);\n\n  return (\n    <div className=\"flex flex-row w-auto p-8 pt-10 overflow-auto text-center bg-gray-100\">\n      {/* <input\n        type=\"number\"\n        id=\"MargenSuperior\"\n        step=\"0.5\"\n        min=\"0\"\n        onChange={(e) =>\n          setConfiguracionesPagina({\n            ...ConfiguracionesPagina,\n            margenSuperior: cmToPx(parseFloat(e.target.value)) | 0,\n          })\n        }\n        defaultValue={pxToCm(ConfiguracionesPagina.margenSuperior)}\n      /> */}\n\n      <Toolbar\n        BloqueActual={BloqueActual}\n        setBlocks={setBlocks}\n        Blocks={Blocks}\n      />\n\n      <Pagina\n        {...ConfiguracionesPagina}\n        Blocks={Blocks}\n        setBlocks={setBlocks}\n        BloqueActual={BloqueActual}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}